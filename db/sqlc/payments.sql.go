// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payments.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payment (tenant_id, period,start_date, end_date, renewed) VALUES ($1,$2,$3,$4,$5)
`

type CreatePaymentParams struct {
	TenantID  uuid.UUID `json:"tenant_id"`
	Period    int32     `json:"period"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Renewed   bool      `json:"renewed"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.TenantID,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Renewed,
	)
	return err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM payment WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id,tenant_id, period, start_date, end_date, renewed, version FROM payment
`

type GetAllPaymentsRow struct {
	ID        uuid.UUID `json:"id"`
	TenantID  uuid.UUID `json:"tenant_id"`
	Period    int32     `json:"period"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Renewed   bool      `json:"renewed"`
	Version   uuid.UUID `json:"version"`
}

func (q *Queries) GetAllPayments(ctx context.Context) ([]GetAllPaymentsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllPaymentsRow{}
	for rows.Next() {
		var i GetAllPaymentsRow
		if err := rows.Scan(
			&i.ID,
			&i.TenantID,
			&i.Period,
			&i.StartDate,
			&i.EndDate,
			&i.Renewed,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentById = `-- name: GetPaymentById :one
SELECT id, tenant_id, period, start_date, end_date, renewed , version  FROM payment
WHERE id = $1
`

type GetPaymentByIdRow struct {
	ID        uuid.UUID `json:"id"`
	TenantID  uuid.UUID `json:"tenant_id"`
	Period    int32     `json:"period"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Renewed   bool      `json:"renewed"`
	Version   uuid.UUID `json:"version"`
}

func (q *Queries) GetPaymentById(ctx context.Context, id uuid.UUID) (GetPaymentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentById, id)
	var i GetPaymentByIdRow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Renewed,
		&i.Version,
	)
	return i, err
}

const getUnrenewedByTenantId = `-- name: GetUnrenewedByTenantId :one
SELECT id, tenant_id, period, start_date, end_date, renewed, version FROM payment 
WHERE renewed = false and tenant_id = $1
`

type GetUnrenewedByTenantIdRow struct {
	ID        uuid.UUID `json:"id"`
	TenantID  uuid.UUID `json:"tenant_id"`
	Period    int32     `json:"period"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Renewed   bool      `json:"renewed"`
	Version   uuid.UUID `json:"version"`
}

func (q *Queries) GetUnrenewedByTenantId(ctx context.Context, tenantID uuid.UUID) (GetUnrenewedByTenantIdRow, error) {
	row := q.db.QueryRowContext(ctx, getUnrenewedByTenantId, tenantID)
	var i GetUnrenewedByTenantIdRow
	err := row.Scan(
		&i.ID,
		&i.TenantID,
		&i.Period,
		&i.StartDate,
		&i.EndDate,
		&i.Renewed,
		&i.Version,
	)
	return i, err
}

const updatePayment = `-- name: UpdatePayment :exec
UPDATE payment
SET period = $1, start_date = $2, end_date = $3, renewed = $4, version = uuid_generate_v4()
WHERE id = $5 AND version = $6
`

type UpdatePaymentParams struct {
	Period    int32     `json:"period"`
	StartDate time.Time `json:"start_date"`
	EndDate   time.Time `json:"end_date"`
	Renewed   bool      `json:"renewed"`
	ID        uuid.UUID `json:"id"`
	Version   uuid.UUID `json:"version"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, updatePayment,
		arg.Period,
		arg.StartDate,
		arg.EndDate,
		arg.Renewed,
		arg.ID,
		arg.Version,
	)
	return err
}
